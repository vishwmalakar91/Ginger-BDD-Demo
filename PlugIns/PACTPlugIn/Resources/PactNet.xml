<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PactNet</name>
    </assembly>
    <members>
        <member name="T:PactNet.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:PactNet.Logging.ILog.Log(PactNet.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:PactNet.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:PactNet.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:PactNet.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:PactNet.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:PactNet.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:PactNet.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:PactNet.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:PactNet.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="F:PactNet.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:PactNet.Logging.LogProvider.SetCurrentLogProvider(PactNet.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:PactNet.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PactNet.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:PactNet.Logging.LogProvider.SetCurrentLogProvider(PactNet.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:PactNet.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:PactNet.Logging.ILog"/></returns>
        </member>
        <member name="M:PactNet.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:PactNet.Logging.ILog"/></returns>
        </member>
        <member name="M:PactNet.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:PactNet.Logging.ILog"/></returns>
        </member>
        <member name="M:PactNet.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:PactNet.Logging.ILog"/></returns>
        </member>
        <member name="M:PactNet.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:PactNet.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:PactNet.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curlybraces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PactNet.PactVerifier.#ctor(System.Action,System.Action,PactNet.PactVerifierConfig)">
            <summary>
            Define any set up and tear down state that is required when running the interaction verify.
            We strongly recommend that any set up state is cleared using the tear down. This includes any state and IoC container overrides you may be doing.
            </summary>
            <param name="setUp">A set up action that will be run before each interaction verify. If no action is required please use an empty lambda () => {}.</param>
            <param name="tearDown">A tear down action that will be run after each interaction verify. If no action is required please use an empty lambda () => {}.</param>
            <param name="config"></param>
        </member>
        <member name="M:PactNet.PactVerifier.ProviderState(System.String,System.Action,System.Action)">
            <summary>
            Define a set up and/or tear down action for a specific state specified by the consumer.
            This is where you should set up test data, so that you can fulfil the contract outlined by a consumer.
            </summary>
            <param name="providerState">The name of the provider state as defined by the consumer interaction, which lives in the Pact file.</param>
            <param name="setUp">A set up action that will be run before the interaction verify, if the provider has specified it in the interaction. If no action is required please use an empty lambda () => {}.</param>
            <param name="tearDown">A tear down action that will be run after the interaction verify, if the provider has specified it in the interaction. If no action is required please use an empty lambda () => {}.</param>
        </member>
        <member name="M:PactNet.IPactVerifier.ProviderState(System.String,System.Action,System.Action)">
            <summary>
            Define a set up and/or tear down action for a specific state specified by the consumer.
            This is where you should set up test data, so that you can fulfil the contract outlined by a consumer.
            </summary>
            <param name="providerState">The name of the provider state as defined by the consumer interaction, which lives in the Pact file.</param>
            <param name="setUp">A set up action that will be run before the interaction verify, if the provider has specified it in the interaction. If no action is required please use an empty lambda () => {}.</param>
            <param name="tearDown">A tear down action that will be run after the interaction verify, if the provider has specified it in the interaction. If no action is required please use an empty lambda () => {}.</param>
        </member>
    </members>
</doc>
